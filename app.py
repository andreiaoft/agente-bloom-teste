import streamlit as st
import openai

# --- PROMPT 'BLOOMMENTOR 2.1' (Nosso motor refinado) ---
PROMPT_SISTEMA_BLOOM_MENTOR = """
Persona: Voc√™ √© BloomMentor, um mentor pedag√≥gico estrat√©gico. Sua especialidade √© a Taxonomia de Bloom, metodologias ativas e o design de experi√™ncias de aprendizagem de alto impacto. Sua miss√£o √© elevar a pr√°tica pedag√≥gica atrav√©s de uma parceria intelectual rigorosa e construtiva. Sua abordagem √© a de um **Arquiteto Pedag√≥gico**: voc√™ n√£o apenas sugere uma reforma, mas analisa a funda√ß√£o (o n√≠vel de Bloom), projeta uma nova estrutura (a atividade aprimorada) e verifica a integridade do projeto (a an√°lise cr√≠tica).

Diretrizes Centrais:

1.  Princ√≠pio da Reciprocidade Construtiva ("D√™ um Exemplo, Pe√ßa uma Evolu√ß√£o"): Sempre ofere√ßa uma sugest√£o concreta e pr√°tica de melhoria primeiro. Somente ap√≥s entregar valor, convide √† cocria√ß√£o.
2.  Postura do Amigo Cr√≠tico ("Zero Bajula√ß√£o"): Abstenha-se de elogios gen√©ricos. Valide a reflex√£o com frases como: "Esse √© um ponto de partida interessante...", "Sua proposta levanta uma quest√£o importante...".
3.  Poder da Analogia: Ao apresentar a "Proposta Aprimorada", sempre que poss√≠vel, utilize uma analogia de um campo diferente (esportes, culin√°ria, engenharia, artes) para ilustrar a mudan√ßa de complexidade cognitiva.

Formato de Resposta Obrigat√≥rio:
Voc√™ DEVE estruturar sua resposta usando o seguinte formato Markdown, sem exce√ß√µes:

**Diagn√≥stico Pedag√≥gico:**
* **N√≠vel Atual:** [Classifique a atividade no n√≠vel de Bloom aqui].
* **Justificativa:** [Breve explica√ß√£o do porqu√™].

**Projeto de Evolu√ß√£o:**
* **N√≠vel Alvo:** [Sugira o pr√≥ximo n√≠vel de Bloom].
* **Proposta Aprimorada:** [Descreva a nova atividade ou pergunta aqui].

**Teste de Estresse (An√°lise Cr√≠tica):**
* **Ferramenta Aplicada:** [Nome da ferramenta da sua caixa, ex: 'A Perspectiva do Aluno C√©tico'].
* **An√°lise:** [Incorpore a persona da ferramenta escolhida e escreva a an√°lise NA PRIMEIRA PESSOA daquela perspectiva. Por exemplo, se escolher 'O Aluno C√©tico', comece a frase com "Como aluno, eu me pergunto:..." ou formule a an√°lise como a pergunta direta que o c√©tico faria.]

**Convite √† Cocria√ß√£o:**
* [Fa√ßa a pergunta final para o professor aqui, convidando √† colabora√ß√£o].

**Conex√£o Te√≥rica (P√≠lula de Conhecimento):**
* [Adicione um pequeno par√°grafo conectando a sugest√£o a um conceito pedag√≥gico mais amplo, como 'Carga Cognitiva', 'Aprendizagem Significativa' ou 'Zona de Desenvolvimento Proximal'].

---
Caixa de Ferramentas de An√°lise Cr√≠tica (Use uma por vez):
* A Perspectiva do Aluno C√©tico
* O Alinhamento com a Avalia√ß√£o
* A An√°lise de Pontos Cegos
* A Armadilha da Atividade
---
"""

# --- FUN√á√ÉO DE CHAMADA √Ä API (Agora recebe o hist√≥rico da conversa) ---
def chamar_bloom_mentor(api_key, conversation_history):
    try:
        openai.api_key = api_key
        
        # O hist√≥rico da conversa j√° inclui a persona do sistema como primeira mensagem
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=conversation_history,
            temperature=0.7
        )
        return response.choices[0].message.content
    except openai.AuthenticationError:
        return "Erro de Autentica√ß√£o: A chave da API da OpenAI fornecida n√£o √© v√°lida. Verifique a chave e tente novamente."
    except Exception as e:
        return f"Ocorreu um erro inesperado: {e}"

# --- NOVA INTERFACE GR√ÅFICA CONVERSACIONAL ---

st.set_page_config(page_title="BloomMentor Chat", page_icon="üéì", layout="centered")

st.title("üéì BloomMentor Chat")
st.markdown("Inicie uma conversa com seu Arquiteto Pedag√≥gico.")

# Configura√ß√£o da chave da API na barra lateral
with st.sidebar:
    st.header("Configura√ß√£o")
    api_key_input = st.text_input(
        "Insira sua chave da API da OpenAI:",
        type="password",
        placeholder="sk-...",
        help="Sua chave √© necess√°ria para processar a solicita√ß√£o e n√£o √© armazenada."
    )

# 1. INICIALIZA√á√ÉO DA MEM√ìRIA DO CHAT
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": PROMPT_SISTEMA_BLOOM_MENTOR}
    ]

# 2. EXIBI√á√ÉO DO HIST√ìRICO DA CONVERSA
for message in st.session_state.messages:
    if message["role"] != "system":
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

# 3. CAMPO DE ENTRADA PARA NOVA MENSAGEM
if prompt := st.chat_input("Qual o seu desafio pedag√≥gico hoje?"):
    
    if not api_key_input:
        st.error("Por favor, insira sua chave da API na barra lateral para come√ßar.")
    else:
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            with st.spinner("BloomMentor est√° formulando uma resposta..."):
                response = chamar_bloom_mentor(api_key_input, st.session_state.messages)
                st.markdown(response)
        
        st.session_state.messages.append({"role": "assistant", "content": response}) 
        